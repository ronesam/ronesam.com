{"summary":"<blockquote><p>博学之，审问之，慎思之，明辨之，笃行之。<br>有弗学，学之弗能，弗措也；<br>有弗问，问之弗知，弗措也；<br>有弗思，思之弗得，弗措也；<br>有弗辨，辨之弗明，弗措也；<br>有弗行，行之弗笃，弗措也。<br>人一能之，己百之；人十能之，己千之。<br>果能此道矣，虽愚必明，虽柔必强。</p>\n<footer><strong>子思</strong><cite>中庸·第二十章</cite></footer></blockquote>\n<a id=\"more\"></a>\n<p>成为全栈工程师，并不是一件容易的事情：</p>\n<ul>\n<li><a href=\"http://www.zhihu.com/question/22420900\" target=\"_blank\" rel=\"external\">怎样成为全栈工程师（Full Stack Developer）？</a></li>\n<li><a href=\"http://www.nowamagic.net/librarys/veda/detail/2583\" target=\"_blank\" rel=\"external\">从知乎上看到“全栈开发者”讨论之后的自黑</a></li>\n</ul>\n<p>有兴趣可以翻阅一下，这里并不赘述。</p>\n<p>在我看来，要成为真正的“全栈”，而不是“样样皆通，样样稀松”的样子货，有两本《真经》是必修课：</p>\n<ul>\n<li>《九阳真经》：<a href=\"http://search.jd.com/Search?keyword=%E4%BC%81%E4%B8%9A%E5%BA%94%E7%94%A8%E6%9E%B6%E6%9E%84%E6%A8%A1%E5%BC%8F&amp;enc=utf-8&amp;suggest=1.rem.1&amp;wq=%E4%BC%81%E4%B8%9A%E5%BA%94%E7%94%A8%E6%9E%B6%E6%9E%84%E6%A8%A1%E5%BC%8F&amp;pvid=6j7dnzii.vbtbiy\" title=\"《企业应用架构模式》Martin Fowler 著；王怀民，周斌 译\" target=\"_blank\" rel=\"external\">《企业应用架构模式》Martin Fowler 著；王怀民，周斌 译</a></li>\n<li>《九阴真经》：<a href=\"http://search.jd.com/Search?keyword=%E8%BD%AF%E4%BB%B6%E6%96%B9%E6%B3%95&amp;enc=utf-8&amp;wq=%E8%BD%AF%E4%BB%B6%E6%96%B9%E6%B3%95&amp;pvid=ioyiozii.vbtbiy\" title=\"《软件方法》 潘加宇 著\" target=\"_blank\" rel=\"external\">《软件方法》 潘加宇 著</a></li>\n</ul>\n<p>《企业应用架构模式（Patterns Of Enterprise Application Architecture）》（简称《PEAA》），是战略级别的神书。</p>\n<p>该书初版于2003年，中文初版于2010年。</p>\n<p>看似年深日久，实则越老越醇越香。</p>\n<p>正所谓“太阳底下无新事”。</p>\n<p>Web开发这十几年来，技术方面天翻地覆，日新月异——第一代iPhone发布于2007年1月9日，然后就真的颠覆和创造了好大一个行业——然而，其分层思想、架构模式等等，仍然没有超脱本书的范围。</p>\n<p>甚至可以说，新技术引入导致的概念上的冲突和模糊（比如MVC vs MVVM vs MVT），阅读本书之后，反而会通透和清晰起来。</p>\n<p>《PEAA》将系统架构分为三个基本层次：表现层、领域层、数据源层（存取层）。</p>\n<p>而在Web应用之中，由于客户端和服务器的天然隔离，事实上将表现层分成了交互层和应用层，因此实际上是四层架构：</p>\n<ul>\n<li>界面交互（风）：风，敏捷。在界面交互层，唯一不变的就是改变。核心是要快进快出，不断试错；</li>\n<li>应用为王（火）：火，融合。核心是要转换数据，适配界面交互的请求；</li>\n<li>海量服务（水）：水，汇聚。前端的涓涓细流，在这里汇聚成汪洋大海。核心是要稳定可靠，追求“5个9”（99.999%）；</li>\n<li>数据银行（地）：地，持久。数据说明一切，一切都要看数据。核心是要详尽准确，容灾容错。</li>\n</ul>\n<figure class=\"highlight plain\"><figcaption><span>about/web-full-stack.png alt:系统架构的四个基本层次```</span></figcaption><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">另一本战术级别的神书，就是潘加宇所著的《软件方法》。</div><div class=\"line\"></div><div class=\"line\">大抵一本有追求的书，总喜欢给自己冠上“深入浅出”的前缀。</div><div class=\"line\"></div><div class=\"line\">浅出的是操作，深入的是原理。</div><div class=\"line\"></div><div class=\"line\">知其然，并知其所以然。</div><div class=\"line\"></div><div class=\"line\">然而，说得太浅，就变成满本书都是软件安装的截图。</div><div class=\"line\"></div><div class=\"line\">说得太深，又变成云里雾里，看上去都是认识的字，读起来满脑子浆糊。</div><div class=\"line\"></div><div class=\"line\">这里面的平衡少有书籍能够把握得好。</div><div class=\"line\"></div><div class=\"line\">而作为一本讲述方法论的书，《软件方法》做得无可挑剔。</div><div class=\"line\"></div><div class=\"line\">精通《PEAA》，网站的组织和架构已经没有任何秘密。</div><div class=\"line\"></div><div class=\"line\">然并卵，没有业务的洗礼，那也只是屠龙之技。</div><div class=\"line\"></div><div class=\"line\">而从业务到代码，还有很长的路要走。</div><div class=\"line\"></div><div class=\"line\">《软件方法》倡导的核心工作流：业务建模 -&gt; 需求 -&gt; 分析 -&gt; 设计，大大简化了软件开发的复杂度。</div><div class=\"line\"></div><div class=\"line\">首先能够理清一团乱麻的业务，重点是明确责任的归属；并能够减少需求变更导致的代码变动；把原本封装在大牛脑海里面的领域逻辑、特殊处理、潜规则……变成可积累和传承的知识；同时也能够帮助发现异常和风险点，针对性准备危机处理方案。</div><div class=\"line\"></div><div class=\"line\">本站栏目的组织源自《PEAA》，内容上的组织则源自《软件方法》。</div><div class=\"line\"></div><div class=\"line\">不因学而学，而为解决问题而学。</div><div class=\"line\"></div><div class=\"line\">```quote 月光博客 http://www.williamlong.info/archives/3731.html 全栈工程师到底有什么用</div><div class=\"line\">全栈工程师就是掌握20%常用技能的人，但这20%的技能会有80%的几率被用到，剩下那80%不常用的，让我们Google吧。</div></pre></td></tr></table></figure>\n"}