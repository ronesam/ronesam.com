{"summary":"<blockquote><p>使用下面的关系区别这两个操作：</p>\n<ul>\n<li>git pull = git fetch + git merge</li>\n<li>git pull –rebase = git fetch + git rebase</li>\n</ul>\n<footer><strong>散尽浮华</strong><cite><a href=\"http://www.cnblogs.com/kevingrace/p/5896706.html\" target=\"_blank\" rel=\"noopener\">简单对比git pull和git pull --rebase的使用</a></cite></footer></blockquote>\n<a id=\"more\"></a>\n<p>现在来看看<code>git merge</code>和<code>git rebase</code>的区别。</p>\n<p>假设有3次提交A, B, C。</p>\n<p><img src=\"1.png\" alt=\"3次提交A, B, C\"></p>\n<p>在远程分支<code>origin</code>的基础上创建一个名为<code>mywork</code>的分支并提交了，同时有其他人在<code>origin</code>上做了一些修改并提交了。</p>\n<p><img src=\"2.png\" alt=\"mywork\"></p>\n<p>其实这个时候<code>E</code>不应该提交，因为提交后会发生冲突。</p>\n<p>如何解决这些冲突呢？有以下两种方法：</p>\n<h2 id=\"git-merge\"><a href=\"#git-merge\" class=\"headerlink\" title=\"git merge\"></a><code>git merge</code></h2><p>用<code>git pull</code>命令把<code>origin</code>分支上的修改<code>pull</code>下来与本地提交合并（<code>merge</code>）成版本<code>M</code>，但这样会形成图中的菱形，让人很困惑。</p>\n<p><img src=\"3.png\" alt=\"merge\"></p>\n<h2 id=\"git-rebase\"><a href=\"#git-rebase\" class=\"headerlink\" title=\"git rebase\"></a><code>git rebase</code></h2><p>创建一个新的提交<code>R</code>，<code>R</code>的文件内容和上面<code>M</code>的一样，但我们将<code>E</code>提交废除，当它不存在（图中用虚线表示）。</p>\n<p><code>rebase</code>的好处是避免了菱形的产生，保持提交曲线为直线，让大家易于理解。</p>\n<p><img src=\"4.png\" alt=\"rebase\"></p>\n<ul>\n<li>在<code>rebase</code>的过程中，有时也会有<code>conflict</code>，这时<code>Git</code>会停止<code>rebase</code>并让用户去解决冲突。</li>\n<li>解决完冲突后，用<code>git add</code>命令去更新这些内容，然后不用执行<code>git-commit</code>，直接执行<code>git rebase --continue</code>，这样<code>git</code>会继续<code>apply</code>余下的补丁。</li>\n<li>在任何时候，都可以用<code>git rebase --abort</code>参数来终止<code>rebase</code>的行动，并且<code>mywork</code>分支会回到<code>rebase</code>开始前的状态。</li>\n</ul>\n"}