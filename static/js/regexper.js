!function(exports, global, require){
global.regexper = exports;
// Generated by CoffeeScript 1.10.0
var _parser;

_parser = function(exp) {
  var reg, result;
  result = {};
  reg = /\/([igm]{0,3})$/;
  reg = exp.match;
  result.flag = _parserFlag(exp);
  result.exps = [
    {
      type: 'Anchor',
      content: '页首'
    }, {
      type: 'Literal',
      content: '['
    }, {
      type: 'Subexp',
      content: []
    }, {
      type: 'Literal',
      content: ']'
    }, {
      type: 'Anchor',
      content: '行尾'
    }
  ];
  return result;
};

exports.parser = _parser;

// Generated by CoffeeScript 1.10.0
var _parserFlag;

_parserFlag = function(exp) {
  var explain, flag, len;
  flag = [];
  explain = {
    g: 'Global',
    i: 'Ignore Case',
    m: 'Multiline'
  };
  if (reg && reg[1]) {
    len = reg[1].length + 1;
    while (len -= 1) {
      flag.push(explain[reg[1].substr(-len, 1)]);
    }
  }
  return flag;
};

// Generated by CoffeeScript 1.10.0
var _render, _renderGroup, _renderLabel, _renderLabeledBox;

_render = function(svg, exp) {
  var box, group, res;
  res = _parser(exp);
  res.svg = svg;
  svg = Snap(svg);
  group = _renderGroup(svg, 'Root', res);
  box = group.getBBox();
  group.transform(Snap.matrix().translate(10 - box.x, 10 - box.y));
  return svg.attr({
    width: box.width + 20,
    height: box.height + 20
  });
};

_renderGroup = function(svg, type, exp) {
  var class_name, group;
  class_name = type;
  group = svg.group().addClass(class_name.toLowerCase());
  return (eval('_render' + type))(group, exp);
};

_renderLabel = function(group, text) {
  var box, label, margin, rect;
  label = group.addClass('label');
  rect = label.rect();
  text = label.text(0, 0, text);
  box = text.getBBox();
  margin = 5;
  text.transform(Snap.matrix().translate(margin, box.height / 2 + 2 * margin));
  rect.attr({
    width: box.width + 2 * margin,
    height: box.height + 2 * margin
  });
  return label;
};

_renderLabeledBox = function(svg, text) {};

exports.render = _render;

// Generated by CoffeeScript 1.10.0
var _renderAnchor;

_renderAnchor = function(group, exp) {
  var box;
  box = group.getBBox();
  return _renderLabel(group, [exp]);
};

// Generated by CoffeeScript 1.10.0
var _renderFlag;

_renderFlag = function(group, exp) {};

// Generated by CoffeeScript 1.10.0
var _renderLiteral;

_renderLiteral = function(group, exp) {
  var label, spans;
  label = group.group();
  _renderLabel(label, ['\u201c', exp, '\u201d']);
  spans = label.selectAll('tspan');
  spans[0].addClass('quote');
  spans[2].addClass('quote');
  label.select('rect').attr({
    rx: 3,
    ry: 3
  });
};

// Generated by CoffeeScript 1.10.0
var _renderMatch;

_renderMatch = function(group, res) {
  var _connect, box, exp, i, item, item_padding, item_width, items, j, k, l, len, len1, len2, line, path, ref;
  group.transform(Snap.matrix().translate(10, res.match));
  ref = res.exps;
  for (j = 0, len = ref.length; j < len; j++) {
    exp = ref[j];
    _renderGroup(group, exp.type, exp.content);
  }
  items = group.selectAll(res.svg + ' > g > g > g');
  item_width = [0];
  item_padding = 10;
  _connect = function(item, i) {
    var box, move;
    box = item.getBBox();
    if (0 === i) {
      move = 0;
    } else {
      move = item_width[i - 1];
    }
    item_width[i] = move + box.width + item_padding;
    item.transform(Snap.matrix().translate(move, 0));
  };
  for (i = k = 0, len1 = items.length; k < len1; i = ++k) {
    item = items[i];
    _connect(item, i);
  }
  item_width.splice(-1);
  box = group.getBBox();
  path = [];
  for (l = 0, len2 = item_width.length; l < len2; l++) {
    line = item_width[l];
    path.push('M' + line + ',' + box.r1 + 'H' + (line - item_padding));
  }
  group.path(path.join(''));
  return group;
};

// Generated by CoffeeScript 1.10.0
var _renderRoot;

_renderRoot = function(group, res) {
  var box, flag, match, path;
  if (res.flag.length > 0) {
    flag = group.text(0, 0, 'Flag: ' + res.flag.join(', '));
  }
  res.match = res.flag.length > 0 ? flag.getBBox().height : 0;
  match = _renderGroup(group, 'Match', res);
  box = match.getBBox();
  path = 'M' + box.x + ',' + box.cy + 'H0M' + box.x2 + ',' + box.cy + 'H' + (box.x2 + 10);
  group.path(path);
  group.circle(0, box.cy, 5);
  group.circle(box.x2 + 10, box.cy, 5);
  return group;
};

// Generated by CoffeeScript 1.10.0
var _renderSubexp;

_renderSubexp = function(svg, exp) {};

}({}, function(){ return this; }(), function(name){ return this[name]; });